#pragma kernel FrustumCulling

StructuredBuffer <float4x4> input;
uint inputCount;
float4 cameraPlanes[6];

float3 boxCenter;
float3 boxExtents;

AppendStructuredBuffer<float4x4> VisibleBuffer;

bool IsOutsidePlane(float4 plane , float3 pointPosition)
{
	return dot(plane.xyz , pointPosition) + plane.w > 0;
}

bool ISCulled(in float4 boundVerts[8])
{
	//如果包围盒8个点在视锥体某个面之外，则剔除
	for (int i = 0; i < 6; i++)
	{
		for (int j = 0; j < 8; j++)
		{
			if(!IsOutsidePlane(cameraPlanes[i] , boundVerts[j].xyz)) break;
			if(j == 7) return true;
		}
	}
	return false;
}

[numthreads(64,1,1)]
void FrustumCulling (uint3 id : SV_DispatchThreadID)
{
	if (id.x >= inputCount) return;

	float4x4 instance = input[id.x];

	float3 boundMin = boxCenter - boxExtents;
	float3 boundMax = boxCenter + boxExtents;
	float4 boundVerts[8];
	boundVerts[0] = mul(instance, float4(boundMin, 1));
    boundVerts[1] = mul(instance, float4(boundMax, 1));
    boundVerts[2] = mul(instance, float4(boundMax.x, boundMax.y, boundMin.z, 1));
    boundVerts[3] = mul(instance, float4(boundMax.x, boundMin.y, boundMax.z, 1));
    boundVerts[6] = mul(instance, float4(boundMax.x, boundMin.y, boundMin.z, 1));
    boundVerts[4] = mul(instance, float4(boundMin.x, boundMax.y, boundMax.z, 1));
    boundVerts[5] = mul(instance, float4(boundMin.x, boundMax.y, boundMin.z, 1));
    boundVerts[7] = mul(instance, float4(boundMin.x, boundMin.y, boundMax.z, 1));

	if(!ISCulled(boundVerts))
		VisibleBuffer.Append(instance);
}
